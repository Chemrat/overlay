diff -ur SDL-1.2.15/configure.in SDL-1.2.15-supercombo/configure.in
--- SDL-1.2.15/configure.in	2012-01-19 06:30:05.000000000 +0000
+++ SDL-1.2.15-supercombo/configure.in	2012-01-28 21:02:20.000000000 +0000
@@ -1050,6 +1050,10 @@
             fi
             have_video=yes
 
+            AC_CHECK_HEADER(X11/XF86keysym.h, have_xf86keysym_h=yes)
+            if test x$have_xf86keysym_h = xyes; then
+                EXTRA_CFLAGS="$EXTRA_CFLAGS -DHAVE_XF86KEYSYM"
+            fi
             AC_ARG_ENABLE(dga,
 AC_HELP_STRING([--enable-dga], [allow use of X11 DGA code [[default=yes]]]),
                           , enable_dga=yes)
diff -ur SDL-1.2.15/include/SDL_keysym.h SDL-1.2.15-supercombo/include/SDL_keysym.h
--- SDL-1.2.15/include/SDL_keysym.h	2012-01-19 06:30:05.000000000 +0000
+++ SDL-1.2.15-supercombo/include/SDL_keysym.h	2012-01-28 21:02:20.000000000 +0000
@@ -296,6 +296,27 @@
 	SDLK_UNDO		= 322,		/**< Atari keyboard has Undo */
         /*@}*/
 
+	/** @name Multimedia keys */
+	/*@{*/
+	SDLK_VOLUMEUP		= 323,
+	SDLK_VOLUMEDOWN		= 324,
+	SDLK_AUDIONEXT		= 325,
+	SDLK_AUDIOPREV		= 326,
+	SDLK_AUDIOSTOP		= 327,
+	SDLK_AUDIOPLAY		= 328,
+	SDLK_AUDIOMUTE		= 329,
+	SDLK_WWW		= 330,
+	SDLK_MAIL		= 331,
+	SDLK_CALCULATOR		= 332,
+	SDLK_COMPUTER		= 333,
+	SDLK_AC_SEARCH		= 334,
+	SDLK_AC_HOME		= 335,
+	SDLK_AC_BACK		= 336,
+	SDLK_AC_FORWARD		= 337,
+	SDLK_AC_STOP		= 338,
+	SDLK_AC_REFRESH		= 339,
+	/*@}*/
+
 	/* Add any other keys here */
 
 	SDLK_LAST
diff -ur SDL-1.2.15/src/audio/SDL_sysaudio.h SDL-1.2.15-supercombo/src/audio/SDL_sysaudio.h
--- SDL-1.2.15/src/audio/SDL_sysaudio.h	2012-01-19 06:30:06.000000000 +0000
+++ SDL-1.2.15-supercombo/src/audio/SDL_sysaudio.h	2012-01-28 21:02:25.000000000 +0000
@@ -53,6 +53,8 @@
 	Uint8 *(*GetAudioBuf)(_THIS);
 	void (*WaitDone)(_THIS);
 	void (*CloseAudio)(_THIS);
+	void (*VolumeAudio)(_THIS, SDL_AudioSpec *spec, int updown);
+	void (*MuteAudio)(_THIS, SDL_AudioSpec *spec);
 
 	/* * * */
 	/* Lock / Unlock functions added for the Mac port */
diff -ur SDL-1.2.15/src/audio/alsa/SDL_alsa_audio.c SDL-1.2.15-supercombo/src/audio/alsa/SDL_alsa_audio.c
--- SDL-1.2.15/src/audio/alsa/SDL_alsa_audio.c	2012-01-19 06:30:06.000000000 +0000
+++ SDL-1.2.15-supercombo/src/audio/alsa/SDL_alsa_audio.c	2012-01-30 00:38:39.000000000 +0000
@@ -49,6 +49,8 @@
 static void ALSA_PlayAudio(_THIS);
 static Uint8 *ALSA_GetAudioBuf(_THIS);
 static void ALSA_CloseAudio(_THIS);
+static void ALSA_VolumeAudio(_THIS, SDL_AudioSpec *spec, int updown);
+static void ALSA_MuteAudio(_THIS, SDL_AudioSpec *spec);
 
 #ifdef SDL_AUDIO_DRIVER_ALSA_DYNAMIC
 
@@ -90,6 +92,23 @@
 #define snd_pcm_hw_params_sizeof SDL_NAME(snd_pcm_hw_params_sizeof)
 #define snd_pcm_sw_params_sizeof SDL_NAME(snd_pcm_sw_params_sizeof)
 
+static int (*SDL_NAME(snd_mixer_open))(snd_mixer_t **mixer, int mode);
+static int (*SDL_NAME(snd_mixer_attach))(snd_mixer_t *mixer, const char *name);
+static int (*SDL_NAME(snd_mixer_load))(snd_mixer_t *mixer);
+static int (*SDL_NAME(snd_mixer_close))(snd_mixer_t *mixer);
+static size_t (*SDL_NAME(snd_mixer_selem_id_sizeof))(void);
+static int (*SDL_NAME(snd_mixer_selem_register))(snd_mixer_t *mixer, struct snd_mixer_selem_regopt *options, snd_mixer_class_t **classp);
+static void (*SDL_NAME(snd_mixer_selem_id_set_index))(snd_mixer_selem_id_t *obj, unsigned int val);
+static void (*SDL_NAME(snd_mixer_selem_id_set_name))(snd_mixer_selem_id_t *obj, const char *val);
+static snd_mixer_elem_t *(*SDL_NAME(snd_mixer_find_selem))(snd_mixer_t *mixer, const snd_mixer_selem_id_t *id);
+static int (*SDL_NAME(snd_mixer_selem_get_playback_volume))(snd_mixer_elem_t *elem, long *min, long *max);
+static int (*SDL_NAME(snd_mixer_selem_get_playback_volume_range))(snd_mixer_elem_t *elem, long *min, long *max);
+static int (*SDL_NAME(snd_mixer_selem_set_playback_volume_all))(snd_mixer_elem_t *elem, long value);
+static int (*SDL_NAME(snd_mixer_selem_has_playback_switch))(snd_mixer_elem_t *elem);
+static int (*SDL_NAME(snd_mixer_selem_get_playback_switch))(snd_mixer_elem_t *elem, snd_mixer_selem_channel_id_t channel, int *value);
+static int (*SDL_NAME(snd_mixer_selem_set_playback_switch_all))(snd_mixer_elem_t *elem, int value);
+#define snd_mixer_selem_id_sizeof SDL_NAME(snd_mixer_selem_id_sizeof)
+
 /* cast funcs to char* first, to please GCC's strict aliasing rules. */
 static struct {
 	const char *name;
@@ -124,6 +143,21 @@
 	{ "snd_pcm_sw_params",	(void**)(char*)&SDL_NAME(snd_pcm_sw_params)	},
 	{ "snd_pcm_nonblock",	(void**)(char*)&SDL_NAME(snd_pcm_nonblock)	},
 	{ "snd_pcm_wait",	(void**)(char*)&SDL_NAME(snd_pcm_wait)	},
+	{ "snd_mixer_open",	(void**)(char*)&SDL_NAME(snd_mixer_open)	},
+	{ "snd_mixer_attach",	(void**)(char*)&SDL_NAME(snd_mixer_attach)	},
+	{ "snd_mixer_load",	(void**)(char*)&SDL_NAME(snd_mixer_load)	},
+	{ "snd_mixer_close",	(void**)(char*)&SDL_NAME(snd_mixer_close)	},
+	{ "snd_mixer_selem_id_sizeof",	(void**)(char*)&SDL_NAME(snd_mixer_selem_id_sizeof)	},
+	{ "snd_mixer_selem_register",	(void**)(char*)&SDL_NAME(snd_mixer_selem_register)	},
+	{ "snd_mixer_selem_id_set_index",	(void**)(char*)&SDL_NAME(snd_mixer_selem_id_set_index)	},
+	{ "snd_mixer_selem_id_set_name",	(void**)(char*)&SDL_NAME(snd_mixer_selem_id_set_name)	},
+	{ "snd_mixer_find_selem",	(void**)(char*)&SDL_NAME(snd_mixer_find_selem)	},
+	{ "snd_mixer_selem_get_playback_volume",	(void**)(char*)&SDL_NAME(snd_mixer_selem_get_playback_volume)	},
+	{ "snd_mixer_selem_get_playback_volume_range",	(void**)(char*)&SDL_NAME(snd_mixer_selem_get_playback_volume_range)	},
+	{ "snd_mixer_selem_set_playback_volume_all",	(void**)(char*)&SDL_NAME(snd_mixer_selem_set_playback_volume_all)	},
+	{ "snd_mixer_selem_has_playback_switch",	(void**)(char*)&SDL_NAME(snd_mixer_selem_has_playback_switch)	},
+	{ "snd_mixer_selem_get_playback_switch",	(void**)(char*)&SDL_NAME(snd_mixer_selem_get_playback_switch)	},
+	{ "snd_mixer_selem_set_playback_switch_all",	(void**)(char*)&SDL_NAME(snd_mixer_selem_set_playback_switch_all)	},
 };
 
 static void UnloadALSALibrary(void) {
@@ -241,6 +275,8 @@
 	this->PlayAudio = ALSA_PlayAudio;
 	this->GetAudioBuf = ALSA_GetAudioBuf;
 	this->CloseAudio = ALSA_CloseAudio;
+	this->VolumeAudio = ALSA_VolumeAudio;
+	this->MuteAudio = ALSA_MuteAudio;
 
 	this->free = Audio_DeleteDevice;
 
@@ -617,3 +653,90 @@
 	/* We're ready to rock and roll. :-) */
 	return(0);
 }
+
+static void ALSA_VolumeAudio(_THIS, SDL_AudioSpec *spec, int updown)
+{
+	long volume, delta, min, max;
+	snd_mixer_t *mixer;
+	snd_mixer_selem_id_t *sid;
+	snd_mixer_elem_t *elem;
+	const char *dev = get_audio_device(spec->channels);
+	const char *selem_name;
+
+	selem_name = SDL_getenv("SDL_AUDIO_ALSA_MIXER");
+	if (selem_name == NULL) {
+		selem_name = "Master";
+	}
+
+	if (SDL_NAME(snd_mixer_open(&mixer, 0)) != 0)
+		return;
+	if (SDL_NAME(snd_mixer_attach(mixer, dev)) != 0)
+		goto volumefail;
+	if (SDL_NAME(snd_mixer_selem_register(mixer, NULL, NULL)) != 0)
+		goto volumefail;
+	if (SDL_NAME(snd_mixer_load(mixer)) != 0)
+		goto volumefail;
+
+	snd_mixer_selem_id_alloca(&sid);
+	SDL_NAME(snd_mixer_selem_id_set_index(sid, 0));
+	SDL_NAME(snd_mixer_selem_id_set_name(sid, selem_name));
+	elem = SDL_NAME(snd_mixer_find_selem(mixer, sid));
+
+	if (elem != NULL) {
+		SDL_NAME(snd_mixer_selem_get_playback_volume(elem, SND_MIXER_SCHN_FRONT_LEFT, &volume));
+		SDL_NAME(snd_mixer_selem_get_playback_volume_range(elem, &min, &max));
+
+		delta = updown * (max -min) / 100;
+		if (delta == 0)
+			delta = updown > 0 ? 1 : -1;
+		volume = volume + delta;
+		if (volume < min)
+			volume = min;
+		else if (volume > max)
+			volume = max;
+
+		SDL_NAME(snd_mixer_selem_set_playback_volume_all(elem, volume));
+	}
+
+volumefail:
+	SDL_NAME(snd_mixer_close(mixer));
+}
+
+static void ALSA_MuteAudio(_THIS, SDL_AudioSpec *spec)
+{
+	int mute;
+	snd_mixer_t *mixer;
+	snd_mixer_selem_id_t *sid;
+	snd_mixer_elem_t *elem;
+	const char *dev = get_audio_device(spec->channels);
+	const char *selem_name;
+
+	selem_name = SDL_getenv("SDL_AUDIO_ALSA_MIXER");
+	if (selem_name == NULL) {
+		selem_name = "Master";
+	}
+
+	if (SDL_NAME(snd_mixer_open(&mixer, 0)) != 0)
+		return;
+	if (SDL_NAME(snd_mixer_attach(mixer, dev)) != 0)
+		goto mutefail;
+	if (SDL_NAME(snd_mixer_selem_register(mixer, NULL, NULL)) != 0)
+		goto mutefail;
+	if (SDL_NAME(snd_mixer_load(mixer)) != 0)
+		goto mutefail;
+
+	snd_mixer_selem_id_alloca(&sid);
+	SDL_NAME(snd_mixer_selem_id_set_index(sid, 0));
+	SDL_NAME(snd_mixer_selem_id_set_name(sid, selem_name));
+	elem = SDL_NAME(snd_mixer_find_selem(mixer, sid));
+
+	if (elem != NULL) {
+		if (SDL_NAME(snd_mixer_selem_has_playback_switch(elem))) {
+			SDL_NAME(snd_mixer_selem_get_playback_switch(elem, SND_MIXER_SCHN_FRONT_LEFT, &mute));
+			SDL_NAME(snd_mixer_selem_set_playback_switch_all(elem, !mute));
+		}
+	}
+
+mutefail:
+	SDL_NAME(snd_mixer_close(mixer));
+}
diff -ur SDL-1.2.15/src/audio/alsa/SDL_alsa_audio.h SDL-1.2.15-supercombo/src/audio/alsa/SDL_alsa_audio.h
--- SDL-1.2.15/src/audio/alsa/SDL_alsa_audio.h	2012-01-19 06:30:06.000000000 +0000
+++ SDL-1.2.15-supercombo/src/audio/alsa/SDL_alsa_audio.h	2012-01-28 21:02:25.000000000 +0000
@@ -25,6 +25,7 @@
 #define _ALSA_PCM_audio_h
 
 #include <alsa/asoundlib.h>
+#include <alsa/mixer.h>
 
 #include "../SDL_sysaudio.h"
 
diff -ur SDL-1.2.15/src/audio/pulse/SDL_pulseaudio.c SDL-1.2.15-supercombo/src/audio/pulse/SDL_pulseaudio.c
--- SDL-1.2.15/src/audio/pulse/SDL_pulseaudio.c	2012-01-19 06:30:06.000000000 +0000
+++ SDL-1.2.15-supercombo/src/audio/pulse/SDL_pulseaudio.c	2012-01-29 02:13:24.000000000 +0000
@@ -58,6 +58,8 @@
 static void PULSE_CloseAudio(_THIS);
 static void PULSE_WaitDone(_THIS);
 static void PULSE_SetCaption(_THIS, const char *str);
+static void PULSE_VolumeAudio(_THIS, SDL_AudioSpec *spec, int updown);
+static void PULSE_MuteAudio(_THIS, SDL_AudioSpec *spec);
 
 #ifdef SDL_AUDIO_DRIVER_PULSE_DYNAMIC
 
@@ -568,3 +570,13 @@
 
 	return(0);
 }
+
+static void PULSE_VolumeAudio(_THIS, SDL_AudioSpec *spec, int updown)
+{
+	return;
+}
+
+static void PULSE_MuteAudio(_THIS, SDL_AudioSpec *spec)
+{
+	return;
+}
diff -ur SDL-1.2.15/src/events/SDL_keyboard.c SDL-1.2.15-supercombo/src/events/SDL_keyboard.c
--- SDL-1.2.15/src/events/SDL_keyboard.c	2012-01-19 06:30:06.000000000 +0000
+++ SDL-1.2.15-supercombo/src/events/SDL_keyboard.c	2012-01-29 16:41:59.000000000 +0000
@@ -27,7 +27,9 @@
 #include "SDL_events.h"
 #include "SDL_events_c.h"
 #include "SDL_sysevents.h"
-
+#include "SDL_video.h"
+#include "SDL_audio.h"
+#include "../audio/SDL_sysaudio.h"
 
 /* Global keystate information */
 static Uint8  SDL_KeyState[SDLK_LAST];
@@ -51,6 +53,13 @@
 /* Global no-lock-keys support */
 static Uint8 SDL_NoLockKeys;
 
+/* X11 key combo overrides */
+#define OVR_ALTTAB	(1 << 0)
+#define OVR_ALTENTER	(1 << 1)
+#define OVR_ALTG	(1 << 2)
+#define OVR_SOUND	(1 << 3)
+static int SDL_ComboOverride = 0;
+
 #define SDL_NLK_CAPS 0x01
 #define SDL_NLK_NUM  0x02
 
@@ -91,6 +100,18 @@
 		}
 	}
 
+	/* X11 key combo overrides */
+	if ( SDL_getenv("SDL_OVERRIDE_ALTTAB") )
+		SDL_ComboOverride |= OVR_ALTTAB;
+	if ( SDL_getenv("SDL_OVERRIDE_ALTENTER") )
+		SDL_ComboOverride |= OVR_ALTENTER;
+	if ( SDL_getenv("SDL_OVERRIDE_ALTG") )
+		SDL_ComboOverride |= OVR_ALTG;
+	if ( SDL_getenv("SDL_OVERRIDE_SOUND") )
+		SDL_ComboOverride |= OVR_SOUND;
+	if ( SDL_getenv("SDL_OVERRIDE_ALL") )
+		SDL_ComboOverride |= (OVR_ALTTAB|OVR_ALTENTER|OVR_ALTG|OVR_SOUND);
+
 	/* Fill in the blanks in keynames */
 	keynames[SDLK_BACKSPACE] = "backspace";
 	keynames[SDLK_TAB] = "tab";
@@ -331,6 +352,24 @@
 	keynames[SDLK_EURO] = "euro";
 	keynames[SDLK_UNDO] = "undo";
 
+	keynames[SDLK_VOLUMEUP] = "volume up";
+	keynames[SDLK_VOLUMEDOWN] = "volume down";
+	keynames[SDLK_AUDIONEXT] = "audio next";
+	keynames[SDLK_AUDIOPREV] = "audio prev";
+	keynames[SDLK_AUDIOSTOP] = "audio stop";
+	keynames[SDLK_AUDIOPLAY] = "audio play";
+	keynames[SDLK_AUDIOMUTE] = "audio mute";
+	keynames[SDLK_WWW] = "www";
+	keynames[SDLK_MAIL] = "mail";
+	keynames[SDLK_CALCULATOR] = "calculator";
+	keynames[SDLK_COMPUTER] = "computer";
+	keynames[SDLK_AC_SEARCH] = "ac search";
+	keynames[SDLK_AC_HOME] = "ac home";
+	keynames[SDLK_AC_BACK] = "ac back";
+	keynames[SDLK_AC_FORWARD] = "ac forward";
+	keynames[SDLK_AC_STOP] = "ac stop";
+	keynames[SDLK_AC_REFRESH] = "ac refresh";
+
 	/* Done.  Whew. */
 	return(0);
 }
@@ -408,6 +447,71 @@
 printf("The '%s' key has been %s\n", SDL_GetKeyName(keysym->sym), 
 				state == SDL_PRESSED ? "pressed" : "released");
 #endif
+
+	/* X11 key combo overrides */
+#if SDL_VIDEO_DRIVER_X11
+	if (SDL_PublicSurface && state == SDL_PRESSED) {
+		/* Toggle fullscreen on Alt-Enter or Alt-Return */
+		if ( (SDL_ComboOverride & OVR_ALTENTER) &&
+		     ((keysym->sym == SDLK_RETURN) || (keysym->sym == SDLK_KP_ENTER)) &&
+		     (SDL_ModState & KMOD_LALT) ) {
+			SDL_WM_ToggleFullScreen(SDL_PublicSurface);
+			return(0);
+		}
+
+		/* Minimise fullscreen (or window keyboard ungrab) on Alt-Tab */
+		if ( (SDL_ComboOverride & OVR_ALTTAB) &&
+		     (keysym->sym == SDLK_TAB) && (SDL_ModState & KMOD_LALT) ) {
+			if (SDL_PublicSurface->flags & SDL_FULLSCREEN)
+				SDL_WM_IconifyWindow();
+			else
+				SDL_WM_GrabInput(SDL_GRAB_OFF);
+			return(0);
+		}
+
+		/* Toggle window keyboard grab on Alt-G */
+		if ( (SDL_ComboOverride & OVR_ALTG) &&
+		     (keysym->sym == SDLK_g) && (SDL_ModState & KMOD_LALT) ) {
+			if ( ! (SDL_PublicSurface->flags & SDL_FULLSCREEN) ) {
+				if (SDL_WM_GrabInput(SDL_GRAB_QUERY) == SDL_GRAB_ON)
+					SDL_WM_GrabInput(SDL_GRAB_OFF);
+				else
+					SDL_WM_GrabInput(SDL_GRAB_ON);
+				return(0);
+			}
+		}
+	}
+
+	if (current_audio && state == SDL_PRESSED) {
+		/* Volume up on Ctrl-Alt-Q or media key */
+		if ( (keysym->sym == SDLK_VOLUMEUP) ||
+		     ((SDL_ComboOverride & OVR_SOUND) &&
+		     (keysym->sym == SDLK_q) && (SDL_ModState & (KMOD_LCTRL|KMOD_LALT))) ) {
+			if (current_audio->VolumeAudio) {
+				current_audio->VolumeAudio(current_audio, &current_audio->spec, 5);
+				return(0);
+			}
+		}
+		/* Volume down Ctrl-Alt-A or media key */
+		if ( (keysym->sym == SDLK_VOLUMEDOWN) ||
+		     ((SDL_ComboOverride & OVR_SOUND) &&
+		     (keysym->sym == SDLK_a) && (SDL_ModState & (KMOD_LCTRL|KMOD_LALT))) ) {
+			if (current_audio->VolumeAudio) {
+				current_audio->VolumeAudio(current_audio, &current_audio->spec, -5);
+				return(0);
+			}
+		}
+		/* Toggle mute on Ctrl-Alt-Z or media key */
+		if ( (keysym->sym == SDLK_AUDIOMUTE) ||
+		     ((SDL_ComboOverride & OVR_SOUND) &&
+		     (keysym->sym == SDLK_z) && (SDL_ModState & (KMOD_LCTRL|KMOD_LALT))) ) {
+			if (current_audio->MuteAudio) {
+				current_audio->MuteAudio(current_audio, &current_audio->spec);
+				return(0);
+			}
+		}
+	}
+#endif
 	/* Set up the keysym */
 	modstate = (Uint16)SDL_ModState;
 
diff -ur SDL-1.2.15/src/video/x11/SDL_x11events.c SDL-1.2.15-supercombo/src/video/x11/SDL_x11events.c
--- SDL-1.2.15/src/video/x11/SDL_x11events.c	2012-01-19 06:30:06.000000000 +0000
+++ SDL-1.2.15-supercombo/src/video/x11/SDL_x11events.c	2012-01-29 02:01:04.000000000 +0000
@@ -27,6 +27,9 @@
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <X11/keysym.h>
+#ifdef HAVE_XF86KEYSYM
+#include <X11/XF86keysym.h>
+#endif
 #ifdef __SVR4
 #include <X11/Sunkeysym.h>
 #endif
@@ -55,6 +58,7 @@
 /* The translation tables from an X11 keysym to a SDL keysym */
 static SDLKey ODD_keymap[256];
 static SDLKey MISC_keymap[256];
+static SDLKey VENDOR_keymap[256];
 SDLKey X11_TranslateKeycode(Display *display, KeyCode kc);
 
 /*
@@ -1113,6 +1117,33 @@
 	MISC_keymap[XK_Break&0xFF] = SDLK_BREAK;
 	MISC_keymap[XK_Menu&0xFF] = SDLK_MENU;
 	MISC_keymap[XK_Hyper_R&0xFF] = SDLK_MENU;   /* Windows "Menu" key */
+
+	/* Map the vendor keys */
+	for ( i=0; i<SDL_arraysize(VENDOR_keymap); ++i )
+		VENDOR_keymap[i] = SDLK_UNKNOWN;
+
+	/* These XF86 keysyms have 0x1008FF as the high byte */
+#ifdef HAVE_XF86KEYSYM
+	VENDOR_keymap[XF86XK_AudioRaiseVolume&0xFF] = SDLK_VOLUMEUP;
+	VENDOR_keymap[XF86XK_AudioLowerVolume&0xFF] = SDLK_VOLUMEDOWN;
+	VENDOR_keymap[XF86XK_AudioNext&0xFF] = SDLK_AUDIONEXT;
+	VENDOR_keymap[XF86XK_AudioPrev&0xFF] = SDLK_AUDIOPREV;
+	VENDOR_keymap[XF86XK_AudioStop&0xFF] = SDLK_AUDIOSTOP;
+	VENDOR_keymap[XF86XK_AudioPlay&0xFF] = SDLK_AUDIOPLAY;
+	VENDOR_keymap[XF86XK_AudioMute&0xFF] = SDLK_AUDIOMUTE;
+	VENDOR_keymap[XF86XK_WWW&0xFF] = SDLK_WWW;
+	VENDOR_keymap[XF86XK_Mail&0xFF] = SDLK_MAIL;
+	VENDOR_keymap[XF86XK_Calculator&0xFF] = SDLK_CALCULATOR;
+	VENDOR_keymap[XF86XK_MyComputer&0xFF] = SDLK_COMPUTER;
+	VENDOR_keymap[XF86XK_Search&0xFF] = SDLK_AC_SEARCH;
+	VENDOR_keymap[XF86XK_HomePage&0xFF] = SDLK_AC_HOME;
+	VENDOR_keymap[XF86XK_Back&0xFF] = SDLK_AC_BACK;
+	VENDOR_keymap[XF86XK_Forward&0xFF] = SDLK_AC_FORWARD;
+	VENDOR_keymap[XF86XK_Stop&0xFF] = SDLK_AC_STOP;
+	VENDOR_keymap[XF86XK_Refresh&0xFF] = SDLK_AC_REFRESH;
+#endif
+	/*@}*/
+
 }
 
 /* Get the translated SDL virtual keysym */
@@ -1161,6 +1192,11 @@
 		    case 0xFF:
 			key = MISC_keymap[xsym&0xFF];
 			break;
+#ifdef HAVE_XF86KEYSYM
+		    case 0x1008FF:
+			key = VENDOR_keymap[xsym&0xFF];
+			break;
+#endif
 		    default:
 			/*
 			fprintf(stderr, "X11: Unhandled xsym, sym = 0x%04x\n",
